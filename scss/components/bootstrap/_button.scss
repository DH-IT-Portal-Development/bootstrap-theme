.btn {
    font-weight: bold;

    &.btn-arrow-right,
    &.btn-arrow-left {
        &:not([class^="btn-outline"]):not([class*=" btn-outline"]) {
            // The border interferes with the arrow, so we remove it from non-outlined buttons
            // We add the original border width to padding such that it will have the same size as other buttons
            --#{$prefix}btn-border-width: 0;
            --#{$prefix}btn-padding-x: calc(
                #{$btn-padding-x} + #{$btn-border-width}
            );
            --#{$prefix}btn-padding-y: calc(
                #{$btn-padding-y} + #{$btn-border-width}
            );
        }

        &.btn-sm {
            &:not([class^="btn-outline"]):not([class*=" btn-outline"]) {
                // The border interferes with the arrow, so we remove it from non-outlined buttons
                // We add the original border width to padding such that it will have the same size as other buttons
                --#{$prefix}btn-border-width: 0;
                --#{$prefix}btn-padding-x: calc(
                    #{$btn-padding-x-sm} + #{$btn-border-width}
                );
                --#{$prefix}btn-padding-y: calc(
                    #{$btn-padding-y-sm} + #{$btn-border-width}
                );
            }
        }

        &.btn-lg {
            &:not([class^="btn-outline"]):not([class*=" btn-outline"]) {
                // The border interferes with the arrow, so we remove it from non-outlined buttons
                // We add the original border width to padding such that it will have the same size as other buttons
                --#{$prefix}btn-border-width: 0;
                --#{$prefix}btn-padding-x: calc(
                    #{$btn-padding-x-lg} + #{$btn-border-width}
                );
                --#{$prefix}btn-padding-y: calc(
                    #{$btn-padding-y-lg} + #{$btn-border-width}
                );
            }
        }

        &::after,
        &::before {
            display: inline-block;
            font-weight: 900;
            border: 0.0625rem solid transparent;
            @include transition($btn-transition);
        }

        &:hover::after,
        &:hover::before {
            background: var(--#{$prefix}btn-hover-color);
            color: var(--#{$prefix}btn-hover-bg);
            border-color: black;
        }
    }

    &.btn-arrow-right::after {
        content: "＞";
        padding: var(--#{$prefix}btn-padding-y)
            calc(0.8 * var(--#{$prefix}btn-padding-x))
            var(--#{$prefix}btn-padding-y)
            calc(0.8 * var(--#{$prefix}btn-padding-x));
        margin: calc(0px - var(--#{$prefix}btn-padding-y))
            calc(0px - var(--#{$prefix}btn-padding-x))
            calc(0px - var(--#{$prefix}btn-padding-y))
            calc(0.7 * var(--#{$prefix}btn-padding-x));

        border-top-right-radius: var(--#{$prefix}btn-border-radius);
        border-bottom-right-radius: var(--#{$prefix}btn-border-radius);
    }

    &.btn-arrow-left::before {
        content: "＜";
        padding: var(--#{$prefix}btn-padding-y)
            calc(0.8 * var(--#{$prefix}btn-padding-x))
            var(--#{$prefix}btn-padding-y)
            calc(0.8 * var(--#{$prefix}btn-padding-x));
        margin: calc(0px - var(--#{$prefix}btn-padding-y))
            calc(0.7 * var(--#{$prefix}btn-padding-x))
            calc(0px - var(--#{$prefix}btn-padding-y))
            calc(0px - var(--#{$prefix}btn-padding-x));

        border-top-left-radius: var(--#{$prefix}btn-border-radius);
        border-bottom-left-radius: var(--#{$prefix}btn-border-radius);
    }

    &.btn-loading {
        position: relative;
        color: transparent;

        .btn-text {
            color: transparent;
        }

        &::after {
            border: 0.125rem solid #000;
            border-radius: 999999px;
            border-top-color: transparent !important;
            content: "";
            display: block;
            height: 1em;
            width: 1em;
            position: absolute;
            left: calc(50% - (1em * 0.5));
            top: calc(50% - (1em * 0.5));
            animation: spinner-border 0.5s infinite linear;
        }

        @each $name, $color in $theme-colors {
            @at-root &.btn-#{$name}::after {
                border-color: color-contrast($color);
            }
        }
    }
}

.btn-group {
    gap: $btn-group-gap;
}

@each $color, $value in $theme-colors {
    .btn-check:checked + .btn.btn-checked-#{$color},
    .btn-check:active + .btn.btn-checked-#{$color} {
        @if $color == "light" {
            @include button-variant(
                $value,
                $value,
                $hover-background:
                    shade-color($value, $btn-hover-bg-shade-amount),
                $hover-border:
                    shade-color($value, $btn-hover-border-shade-amount),
                $active-background:
                    shade-color($value, $btn-active-bg-shade-amount),
                $active-border:
                    shade-color($value, $btn-active-border-shade-amount)
            );
        } @else if $color == "dark" {
            @include button-variant(
                $value,
                $value,
                $hover-background: tint-color($value, $btn-hover-bg-tint-amount),
                $hover-border: tint-color($value, $btn-hover-border-tint-amount),
                $active-background:
                    tint-color($value, $btn-active-bg-tint-amount),
                $active-border:
                    tint-color($value, $btn-active-border-tint-amount)
            );
        } @else {
            @include button-variant($value, $value);
        }
    }

    .btn-check:checked + .btn.btn-checked-outline-#{$color},
    .btn-check:active + .btn.btn-checked-outline-#{$color} {
        // Needed to make sure we keep outlines instead
        color: var(--bs-btn-color);
        background-color: var(--bs-btn-bg);
        border-color: var(--bs-btn-border-color);

        @include button-outline-variant($value);
    }
}
